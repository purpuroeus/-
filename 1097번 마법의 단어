/*
*마법의 단어
주어진 단어를 가능한 모든 조합으로 생성
0번째 위치부터 검사하여 원래 단어와 같은지 확인
같은 경우의 수가 k와 동일한 경우에는 마법의 단어

예)	입력 : AB RAAB RA
	가능한 조합
		-ABRAABRA

		-ABRARAAB

		-RAABABRA

		-RAABRAAB

		-RAABRAAB

		-RARAABAB

	ABRAABRA의 경우
	ABRAABRAABRAABRA
	ABRAABRA
	    ABRAABRA
	2가지 경우의 수가 존재
	k=2이므로 ABRAABRA는 마법의 단어
*/


#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

string* arr;	//입력받을 단어를 저장할 변수
int c, k;		//c: 입력될 단어의 개수			k: 일치해야하는 단어의 수

void mixer();
int counter(string cmp);


int main() {
	scanf("%d", &c);
	arr = new string[c];
	for (int i = 0; i < c; i++) {
		char t[20];
		scanf("%20s", t);
		string temp = t;
		arr[i] = temp;
	}
	scanf("%d", &k);
	mixer();
}

void mixer() {
	int cnt = 1;						//전체 순열의 개수
	int correct = 0;					//일치하는 수를 저장하는 변수
	for (int i = 1; i <= c; i++) {		//전체 순열의 개수를 구하는 부분 팩토리얼
		cnt *= i;
	}
	int* map = new int[c];				//전체 순열을 저장할 배열, next_permutation 함수로 계속 바뀜
	for (int i = 0; i < c; i++) {		//string 배열의 위치를 이용하기 위한 초기화 작업
		map[i] = i;
	}
	for (int i = 0; i < cnt; i++) {		//단어를 조합해 일치하는지 검사하는 루프
		string temp = "";
		for (int j = 0; j < c; j++) {
			temp.append(arr[map[j]]);	//map에 저장된 조합을 이용해 arr에서 string을 가져와 새로운 string 생성
		}
		correct += counter(temp);		
		next_permutation(map, map + c); //다음 조합을 생성
		temp = "";
	}
	printf("%d", correct);
}

int counter(string cmp) {	//일치하는 패턴의 수를 확인하고 마법의 단어인 경우에 1을 반환
	string origin = cmp;
	origin.append(origin);	//마법의 단어를 확인할 때 최대 원래 단어의 2배까지만 확인하므로
	int count = 0;
	for (int i = 0; i < cmp.size(); i++) {	//string을 단어 크기만큼 1칸씩 이동시키며 비교
		string substr = origin.substr(i, cmp.size());
		if (substr.compare(cmp) == 0) {
			count++;
		}
	}
	if (count == k) {
		return 1;
	}
	return 0;
}
